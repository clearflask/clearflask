/*
 * This file is generated by jOOQ.
 */
package com.smotana.clearflask.store.mysql.model.tables;


import com.smotana.clearflask.store.mysql.LocalDateTimeToInstantBinding;
import com.smotana.clearflask.store.mysql.model.DefaultSchema;
import com.smotana.clearflask.store.mysql.model.JooqIndexes;
import com.smotana.clearflask.store.mysql.model.JooqKeys;
import com.smotana.clearflask.store.mysql.model.tables.records.JooqIdeaRecord;

import java.time.Instant;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqIdea extends TableImpl<JooqIdeaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>idea</code>
     */
    public static final JooqIdea IDEA = new JooqIdea();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JooqIdeaRecord> getRecordType() {
        return JooqIdeaRecord.class;
    }

    /**
     * The column <code>idea.projectId</code>.
     */
    public final TableField<JooqIdeaRecord, String> PROJECTID = createField(DSL.name("projectId"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>idea.postId</code>.
     */
    public final TableField<JooqIdeaRecord, String> POSTID = createField(DSL.name("postId"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>idea.authorUserId</code>.
     */
    public final TableField<JooqIdeaRecord, String> AUTHORUSERID = createField(DSL.name("authorUserId"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>idea.authorName</code>.
     */
    public final TableField<JooqIdeaRecord, String> AUTHORNAME = createField(DSL.name("authorName"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>idea.authorIsMod</code>.
     */
    public final TableField<JooqIdeaRecord, Boolean> AUTHORISMOD = createField(DSL.name("authorIsMod"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>idea.created</code>.
     */
    public final TableField<JooqIdeaRecord, Instant> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "", new LocalDateTimeToInstantBinding());

    /**
     * The column <code>idea.lastActivity</code>.
     */
    public final TableField<JooqIdeaRecord, Instant> LASTACTIVITY = createField(DSL.name("lastActivity"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP(6)", SQLDataType.LOCALDATETIME)), this, "", new LocalDateTimeToInstantBinding());

    /**
     * The column <code>idea.title</code>.
     */
    public final TableField<JooqIdeaRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>idea.description</code>.
     */
    public final TableField<JooqIdeaRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(10000), this, "");

    /**
     * The column <code>idea.response</code>.
     */
    public final TableField<JooqIdeaRecord, String> RESPONSE = createField(DSL.name("response"), SQLDataType.VARCHAR(10000), this, "");

    /**
     * The column <code>idea.responseAuthorUserId</code>.
     */
    public final TableField<JooqIdeaRecord, String> RESPONSEAUTHORUSERID = createField(DSL.name("responseAuthorUserId"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>idea.responseAuthorName</code>.
     */
    public final TableField<JooqIdeaRecord, String> RESPONSEAUTHORNAME = createField(DSL.name("responseAuthorName"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>idea.categoryId</code>.
     */
    public final TableField<JooqIdeaRecord, String> CATEGORYID = createField(DSL.name("categoryId"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>idea.statusId</code>.
     */
    public final TableField<JooqIdeaRecord, String> STATUSID = createField(DSL.name("statusId"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>idea.commentCount</code>.
     */
    public final TableField<JooqIdeaRecord, Long> COMMENTCOUNT = createField(DSL.name("commentCount"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>idea.childCommentCount</code>.
     */
    public final TableField<JooqIdeaRecord, Long> CHILDCOMMENTCOUNT = createField(DSL.name("childCommentCount"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>idea.funded</code>.
     */
    public final TableField<JooqIdeaRecord, Long> FUNDED = createField(DSL.name("funded"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>idea.fundersCount</code>.
     */
    public final TableField<JooqIdeaRecord, Long> FUNDERSCOUNT = createField(DSL.name("fundersCount"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>idea.voteValue</code>.
     */
    public final TableField<JooqIdeaRecord, Long> VOTEVALUE = createField(DSL.name("voteValue"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>idea.votersCount</code>.
     */
    public final TableField<JooqIdeaRecord, Long> VOTERSCOUNT = createField(DSL.name("votersCount"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>idea.expressionsValue</code>.
     */
    public final TableField<JooqIdeaRecord, Double> EXPRESSIONSVALUE = createField(DSL.name("expressionsValue"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>idea.trendScore</code>.
     */
    public final TableField<JooqIdeaRecord, Double> TRENDSCORE = createField(DSL.name("trendScore"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>idea.mergedToPostId</code>.
     */
    public final TableField<JooqIdeaRecord, String> MERGEDTOPOSTID = createField(DSL.name("mergedToPostId"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>idea.order</code>.
     */
    public final TableField<JooqIdeaRecord, Double> ORDER = createField(DSL.name("order"), SQLDataType.DOUBLE, this, "");

    private JooqIdea(Name alias, Table<JooqIdeaRecord> aliased) {
        this(alias, aliased, null);
    }

    private JooqIdea(Name alias, Table<JooqIdeaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>idea</code> table reference
     */
    public JooqIdea(String alias) {
        this(DSL.name(alias), IDEA);
    }

    /**
     * Create an aliased <code>idea</code> table reference
     */
    public JooqIdea(Name alias) {
        this(alias, IDEA);
    }

    /**
     * Create a <code>idea</code> table reference
     */
    public JooqIdea() {
        this(DSL.name("idea"), null);
    }

    public <O extends Record> JooqIdea(Table<O> child, ForeignKey<O, JooqIdeaRecord> key) {
        super(child, key, IDEA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(JooqIndexes.IDEA_IDEA_AUTHORUSERID_IDX, JooqIndexes.IDEA_IDEA_CATEGORYID_IDX, JooqIndexes.IDEA_IDEA_CREATED_IDX, JooqIndexes.IDEA_IDEA_LASTACTIVITY_IDX, JooqIndexes.IDEA_IDEA_MERGEDTOPOSTID_IDX, JooqIndexes.IDEA_IDEA_PROJECTID_IDX, JooqIndexes.IDEA_IDEA_STATUSID_IDX);
    }

    @Override
    public UniqueKey<JooqIdeaRecord> getPrimaryKey() {
        return JooqKeys.KEY_IDEA_PRIMARY;
    }

    @Override
    public JooqIdea as(String alias) {
        return new JooqIdea(DSL.name(alias), this);
    }

    @Override
    public JooqIdea as(Name alias) {
        return new JooqIdea(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqIdea rename(String name) {
        return new JooqIdea(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqIdea rename(Name name) {
        return new JooqIdea(name, null);
    }
}
