/* tslint:disable */
// eslint-disable-next-line no-unused-vars
import * as runtime from './runtime';
// eslint-disable-next-line no-unused-vars
import { Api, ApiInterface } from './apis';
// eslint-disable-next-line no-unused-vars
import * as Model from './models';
{{#apiInfo}}
{{#apis}}
{{#operations}}
// eslint-disable-next-line no-unused-vars
import * as {{ classname }} from './apis/{{ classFilename }}';
{{/operations}}
{{/apis}}
{{/apiInfo}}

export * from './runtime';
export * from './apis';
export * from './models';

export enum Action {
{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#operation}}
  {{nickname}} = '{{nickname}}',
{{/operation}}
{{/operations}}
{{/apis}}
{{/apiInfo}}
}


export type Actions =
{{#apiInfo}}
{{#apis}}
{{#operations}}
  {{^-first}}| {{/-first}}{{#operation}}{{^-first}}  | {{/-first}}{{nickname}}ActionFulfilled
  | {{nickname}}ActionPending
  | {{nickname}}ActionRejected
{{/operation}}
{{/operations}}
{{/apis}}
{{/apiInfo}};


{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#operation}}

export enum {{nickname}}ActionStatus {
  Pending = '{{nickname}}_PENDING',
  Fulfilled = '{{nickname}}_FULFILLED',
  Rejected = '{{nickname}}_REJECTED',
}
export interface {{nickname}}ActionFulfilled {
  type: {{nickname}}ActionStatus.Fulfilled;
  meta: { action: Action.{{nickname}}; request: {{#allParams.0}}{{classname}}.{{operationIdCamelCase}}Request{{/allParams.0}}{{^allParams.0}}undefined{{/allParams.0}}; };
  payload: {{#returnType}}{{#isResponseFile}}runtime.FileDownload{{/isResponseFile}}{{^isResponseFile}}Model.{{{returnType}}}{{/isResponseFile}}{{/returnType}}{{^returnType}}void{{/returnType}};
}
export interface {{nickname}}ActionPending {
  type: {{nickname}}ActionStatus.Pending;
  meta: { action: Action.{{nickname}}; request: {{#allParams.0}}{{classname}}.{{operationIdCamelCase}}Request{{/allParams.0}}{{^allParams.0}}undefined{{/allParams.0}}; };
}
export interface {{nickname}}ActionRejected {
  type: {{nickname}}ActionStatus.Rejected;
  meta: { action: Action.{{nickname}}; request: {{#allParams.0}}{{classname}}.{{operationIdCamelCase}}Request{{/allParams.0}}{{^allParams.0}}undefined{{/allParams.0}}; };
  error: true;
  payload: {
    userFacingMessage?:string
  };
}
{{/operation}}
{{/operations}}
{{/apis}}
{{/apiInfo}}

export class Dispatcher implements ApiInterface {
  readonly apiDelegate:Api;
  readonly dispatcherDelegate:(msg:any)=>Promise<any>;
  constructor(dispatcherDelegate:(msg:any)=>Promise<any>, apiDelegate:Api) {
    this.dispatcherDelegate = dispatcherDelegate;
    this.apiDelegate = apiDelegate || Api;
  }
{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#operation}}

  {{nickname}}({{#allParams.0}}request: {{classname}}.{{operationIdCamelCase}}Request, {{/allParams.0}}{{^vendorExtensions.x-sse}}metaExtra?:any, headerExtra?:{[key:string]:string}{{/vendorExtensions.x-sse}}): {{#vendorExtensions.x-sse}}EventSource{{/vendorExtensions.x-sse}}{{^vendorExtensions.x-sse}}Promise<{{#returnType}}{{#isResponseFile}}runtime.FileDownload{{/isResponseFile}}{{^isResponseFile}}Model.{{{returnType}}}{{/isResponseFile}}{{/returnType}}{{^returnType}}void{{/returnType}}>{{/vendorExtensions.x-sse}} {
    {{#vendorExtensions.x-sse}}
    return this.apiDelegate.get{{classname}}().{{nickname}}({{#allParams.0}}request{{^-last}}, {{/-last}}{{/allParams.0}});
    {{/vendorExtensions.x-sse}}
    {{^vendorExtensions.x-sse}}
    return this.dispatcherDelegate({
      type: Action.{{nickname}},
      meta: {
        ...metaExtra,
        action: Action.{{nickname}},
        request: {{#allParams.0}}request{{/allParams.0}}{{^allParams.0}}undefined{{/allParams.0}},
        retry: (headerExtraOverride?:{[key:string]:string}) => this.{{nickname}}({{#allParams.0}}request, {{/allParams.0}}metaExtra, headerExtraOverride || headerExtra),
      },
      payload: this.apiDelegate.get{{classname}}().{{nickname}}({{#allParams.0}}request, {{/allParams.0}}headerExtra),
    });
    {{/vendorExtensions.x-sse}}
  }
{{/operation}}
{{/operations}}
{{/apis}}
{{/apiInfo}}
}
